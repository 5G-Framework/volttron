
EXTERNAL DEPENDENCIES

A few external dependencies are required for buildout to bootstrap the
development environment: essential build tools (gcc, make, autodev-tools,
etc.), python development files (headers), and openssl.  On Debian-based
systems, these can all be installed with the following command:

   $ sudo apt-get install build-essential python-dev openssl libevent-dev

Please note that if you wish to use cryptographic authentication or
point-to-point encryption, libsodium will also need to be installed.
However, libsodium is not currently in the official Ubuntu or Debian
repositories, so it must be installed manually or from an unofficial
repository, such as https://launchpad.net/~shnatsel/+archive/dnscrypt.
libsodium source code is found at https://github.com/jedisct1/libsodium.

On Arch, the following command will install the dependencies:

   $ sudo pacman -S base-devel python2 openssl libsodium


BUILDING A DEVELOPMENT ENVIRONMENT

To create a development environment, just execute the following in the
project root directory:

   $ ./bootstrap

If the bootstrap script generates a timeout error, re-run buildout in
non-newest mode using the following command:

   $ bin/buildout -N

That's it!  You can now start an interpreter that includes volttron in the
Python path using bin/python or run Volttron Lite using bin/volttron-lite.
The bootstrap script will also create bin/activate which can be sourced to
setup a developer environment with the appropriate paths set.  It also
creates a deactivate function to revert the settings.

   $ . bin/activate
   (volttron)$ echo $PATH
   ... do development work
   (volttron)$ deactivate
   $ echo $PATH

To update the scripts after modifying setup.py or buildout.cfg or after a
repository update, use bin/buildout:

   $ bin/buildout -N || bin/buildout

The bootstrap script executes the following command to create a sandboxed
Python environment:

   $ python2.7 bootstrap.py
   $ bin/buildout

If you manually perform the bootstrap, be sure to use the appropriate
version of Python when calling bootstrap.py.  For instance, if you have
both Python 2.6 and 2.7 installed, with 2.6 being the default, you will
need to explicitly use python2.7 to run bootstrap.  Alternatively, you can
call ./bootstrap with your desired interpreter using the -p option:

   $ ./bootstrap -p python2.7


ADDING PYTHON DEPENDENCIES

To add project dependencies, add the dependent package to the
install_requires list in setup.py and run bin/buildout.

